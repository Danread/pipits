#!/usr/bin/python

from pipits_prep_lib import *

__author__     = "Hyun Soon Gweon"
__copyright__  = "Copyright 2015, The PIPITS Project"
__credits__    = ["Hyun Soon Gweon", "Anna Oliver", "Joanne Taylor", "Tim Booth", "Melanie Gibbs", "Daniel S. Read", "Robert I. Griffiths", "Karsten Schonrogge"]
__license__    = "GPL"
__maintainer__ = "Hyun Soon Gweon"
__email__      = "hyugwe@ceh.ac.uk"

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = "PIPITS_PREP_SINGLE: reindex, quality filter, convert and merge!")
    parser.add_argument(
        "-i",
        action = "store",
        dest = "dataDir",
        metavar = "<DIR>",
        help = "[REQUIRED] Directory with raw sequences in gzipped FASTQ",
        required = True)
    parser.add_argument(
        "-o",
        action = "store",
        dest = "outputdir",
        metavar = "<DIR>",
        help = "[REQUIRED] Directory to output results",
        default = "pipits_prep",
        required = False)
    parser.add_argument(
        "-l",
        action = "store",
        dest = "listfile",
        metavar = "<FILE>",
        help = "Tap separated file with three columns for sample ids, forward-read filename and reverse-read filename. PIPITS_PREP will process only the files listed in this file.",
        required = False)
    parser.add_argument(
        "--FASTX-q",
        action = "store",
        dest = "FASTX_fastq_quality_filter_q",
        metavar = "<INT>",
        help = "FASTX FASTQ_QUALITY_FILTER - Minimum quality score to keep [default: 30]",
        default = "30",
        required = False)
    parser.add_argument(
        "--FASTX-p",
        action = "store",
        dest = "FASTX_fastq_quality_filter_p",
        metavar = "<INT>",
        help = "FASTX FASTQ_QUALITY_FILTER - Minimum percent of bases that must have q quality [default: 80]",
        default = "80",
        required = False)
    parser.add_argument(
        "--FASTX-n",
        action = "store_true",
        dest = "FASTX_fastq_to_fasta_n",
        help = "FASTX FASTQ_TO_FASTA - remove sequences with unknown (N) nucleotides [default: false]",
        required = False)
    parser.add_argument(
        "-b",
        action = "store",
        dest = "base_phred_quality_score",
        metavar = "<INT>",
        help = "Base PHRED quality score [default: 33]",
        default = "33",
        required = False)
    parser.add_argument(
        "-r",
        action = "store_true",
        dest = "retain",
        help = "Retain intermediate files (Beware intermediate files use excessive disk space!)",
        required = False)
    parser.add_argument(
        "-v",
        action = "store_true",
        dest = "verbose",
        help = "Verbose mode",
        required = False)
    parser.add_argument(
        "-t",
        action = "store",
        dest = "threads",
        metavar = "<INT>",
        help = "Number of Threads [default: 1]",
        default = "1",
        required = False)
    parser.add_argument(
        "--forwardreadsonly",
        action = "store_true",
        dest = "forwardreadsonly",
        help = "Do NOT join paired-end sequences, but just use the forward reads.",
        required = False)
    options = parser.parse_args()

    
    # Make directories (outputdir and tmpdir)                        
    if not os.path.exists(options.outputdir):
        os.mkdir(options.outputdir)

    tmpDir = options.outputdir + "/tmp"
    if not os.path.exists(tmpDir):
        os.mkdir(tmpDir)


    # Log files
    logging_file = open(options.outputdir + "/output.log", "w")
    summary_file = open(options.outputdir + "/summary.log", "w")

    # Start!
    logger_info(tc.OKBLUE + "PIPITS_PREP_SINGLE started" + tc.ENDC, logging_file)


    # Check for the presence of rawdata directory
    logger_verbose("Checking for presence of input directory", logging_file, options.verbose)
    if not os.path.exists(options.dataDir):
        logger_error("Cannot find \"" + options.dataDir + "\" directory. Ensure you have the correct name of the directory where your Illumina sequences are stored", logging_file)
        exit(1)

    sampleids = []
    fastqs = []

    # Load sampleids and filenames
    if options.listfile:
        logger_info("Processing user-provided listfile", logging_file)
        try:
            listfile = open(options.listfile, "r")
        except IOError:
            logger_error("\"" + options.listfile + "\" not found.", logging_file)
            exit(1)
        for line in listfile:
            if line.strip(" ").strip("\n") != "" and not line.startswith("#"):
                line_split = line.rstrip().split("\t")

                if line_split[0].find("_") != -1:
                    logger_error("\"_\" is not allowed in the sample id", logging_file)
                    exit(1)

                sampleids.append(line_split[0])
                fastqs.append(line_split[1])
        listfile.close()
    else:
        logger.error("Please run pipits_getreadsingleslist to generate a list file.")


    # Count
    count_sequences(input_dir = options.dataDir, 
                    filenames_list = fastqs, 
                    logging_file = logging_file, 
                    summary_file = summary_file, 
                    verbose = options.verbose)
 
    # Reindex
    logger_info("Reindexing reads", logging_file)
    reindex_fastq(input_dir = options.dataDir,
                  output_dir = options.outputdir + "/tmp/reindex_fastq_F",
                  sampleids_list = sampleids,
                  filenames_list = fastqs,
                  logging_file = logging_file,
                  summary_file = summary_file,
                  verbose = options.verbose)

    # Quality filter
    qualityfilter(input_dir = options.outputdir + "/tmp/reindex_fastq_F",
                  output_dir = options.outputdir + "/tmp/qualityfiltered",
                  sampleids_list = sampleids,
                  base_phred_quality_score = options.base_phred_quality_score,
                  FASTX_fastq_quality_filter_q = options.FASTX_fastq_quality_filter_q,
                  FASTX_fastq_quality_filter_p = options.FASTX_fastq_quality_filter_p,
                  logging_file = logging_file,
                  summary_file = summary_file,
                  verbose = options.verbose)

    # Convert
    convert(input_dir = options.outputdir + "/tmp/qualityfiltered",
            output_dir = options.outputdir + "/tmp/fastqtofasta",
            sampleids_list = sampleids,
            base_phred_quality_score = options.base_phred_quality_score,
            FASTX_fastq_to_fasta_n = options.FASTX_fastq_to_fasta_n,
            logging_file = logging_file,
            summary_file = summary_file,
            verbose = options.verbose)

    # Merge
    merge(input_dir = options.outputdir + "/tmp/fastqtofasta",
          output_dir = options.outputdir,
          sampleids_list = sampleids,
          logging_file = logging_file,
          verbose = options.verbose)


    # Clean up tmp_directory
    if not options.retain:
        logger_info("Cleaning temporary directory", logging_file)
        shutil.rmtree(options.outputdir + "/tmp")


    # Done
    logger_info(tc.OKBLUE + "PIPITS_PREP completed." + tc.ENDC, logging_file)
    logger_info(tc.OKGREEN + "Next Step: PIPITS_PROCESS [ Example: pipits_funits -i " + options.outputdir + "/" + "prepped.fasta -o pipits_funits -x ITS2]" + tc.ENDC, logging_file)

    logging_file.close()
    summary_file.close()

    exit(0)

